#!/usr/bin/env node

var Worker = require('../lib').Worker;

var argv = require('optimist')
  .usage('Manage a firework instance\nUsage: $0 ')
  .options('q', { alias: 'queue', demand: true, describe: 'The Firebase URL that holds the queue' })
  .options('a', { alias: 'auth', describe: 'The Firebase authentication token' })
  .options('m', { alias: 'module', demand: true, describe: 'A module file that exports a function to process jobs'})
  .options('w', { alias: 'workers', default: 1, describe: 'The number of workers to spawn' })
  .argv;

var moduleFile = require('path').join(process.cwd(), argv.m);
var performJob = require(moduleFile);
if (typeof performJob !== 'function') {
  console.error('Module "' + moduleFile + '" does not export a function');
  process.exit(1);
}

var numWorkers = argv.w;
console.log('starting ' + numWorkers + ' worker' + (numWorkers === 1 ? '' : 's'));

var workers = [];
for (var i = 0; i < numWorkers; ++i) {
  (function (n) {

    var workerNumber = n + 1;
    var worker = new Worker({
      queue: argv.q,
      auth: argv.a,
      performJob: performJob
    });

    worker.on('start', function (job) {
      console.log('worker ' + workerNumber + ' started job ' + job._queueName);
    });

    worker.on('failure', function (job, error) {
      console.log('job ' + job._queueName + ' failed, error: ' + error.toString());
    });

    worker.on('idle', function () {
      console.log('worker ' + workerNumber + ' is idle');
    });

    worker.start();
    workers.push(worker);

  }(i));
}

function stopAllWorkers(callback) {
  var numStoppedWorkers = 0;
  function workerStopped() {
    if (++numStoppedWorkers === workers.length && callback) {
      callback();
    }
  }

  workers.forEach(function (worker) {
    worker.stop(workerStopped);
  });
}

process.on('QUIT', function () {
  console.log('QUIT received, gracefully stopping all workers');

  stopAllWorkers(function () {
    process.exit();
  });
});
